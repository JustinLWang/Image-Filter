import static org.junit.Assert.assertEquals;

import java.util.List;
import model.Image;
import model.IImageManipulation;
import model.Pixel;
import model.ProgramImage;
import model.Sharpen;
import org.junit.Test;

/**
 * Test class for the Sharpen class and methods.
 */
public class SharpenTest {

  // test sharpening a null image
  @Test(expected = IllegalArgumentException.class)
  public void testNullImg() {
    IImageManipulation sharpen = new Sharpen();
    ProgramImage programImage = new ProgramImage();
    List<List<Pixel>> checkerBoard = programImage.checkerboard(3, 3, 1);
    Image checkerBoardImg = new Image(checkerBoard);

    List<List<Pixel>> filteredImage0 = sharpen.filter(null, 0);
  }

  // test a negative multiplier
  @Test(expected = IllegalArgumentException.class)
  public void testNegativeMultiplier() {
    IImageManipulation sharpen = new Sharpen();
    ProgramImage programImage = new ProgramImage();
    List<List<Pixel>> checkerBoard = programImage.checkerboard(3, 3, 1);
    Image checkerBoardImg = new Image(checkerBoard);

    List<List<Pixel>> filteredImage0 = sharpen.filter(checkerBoardImg, -1);
  }


  // test a sharpen x0
  @Test
  public void testMultiplierx0() {
    IImageManipulation sharpen = new Sharpen();
    ProgramImage programImage = new ProgramImage();
    List<List<Pixel>> checkerBoard = programImage.checkerboard(3, 3, 1);
    Image checkerBoardImg = new Image(checkerBoard);

    List<List<Pixel>> filteredImage0 = sharpen.filter(checkerBoardImg, 0);

    assertEquals(filteredImage0.get(0).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImage0.get(0).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImage0.get(0).get(2), new Pixel(255, 0, 0));

    assertEquals(filteredImage0.get(1).get(0), new Pixel(0, 0, 255));
    assertEquals(filteredImage0.get(1).get(1), new Pixel(255, 0, 0));
    assertEquals(filteredImage0.get(1).get(2), new Pixel(0, 0, 255));

    assertEquals(filteredImage0.get(2).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImage0.get(2).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImage0.get(2).get(2), new Pixel(255, 0, 0));

  }

  // test sharpen x1 pixels
  @Test
  public void testMultiplierx1() {
    IImageManipulation sharpen = new Sharpen();
    ProgramImage programImage = new ProgramImage();
    List<List<Pixel>> checkerBoard = programImage.checkerboard(3, 3, 1);
    Image checkerBoardImg = new Image(checkerBoard);

    List<List<Pixel>> filteredImagex0 = sharpen.filter(checkerBoardImg, 0);

    assertEquals(filteredImagex0.get(0).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(0).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(0).get(2), new Pixel(255, 0, 0));

    assertEquals(filteredImagex0.get(1).get(0), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(1).get(1), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(1).get(2), new Pixel(0, 0, 255));

    assertEquals(filteredImagex0.get(2).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(2).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(2).get(2), new Pixel(255, 0, 0));

    List<List<Pixel>> filteredImagex1 = sharpen.filter(checkerBoardImg, 1);

    assertEquals(filteredImagex1.get(0).get(0), new Pixel(223.125, 0.0, 63.75));
    assertEquals(filteredImagex1.get(0).get(1), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(0).get(2), new Pixel(223.125, 0.0, 63.75));

    assertEquals(filteredImagex1.get(1).get(0), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(1).get(1), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex1.get(1).get(2), new Pixel(127.5, 0.0, 255.0));

    assertEquals(filteredImagex1.get(2).get(0), new Pixel(223.125, 0.0, 63.75));
    assertEquals(filteredImagex1.get(2).get(1), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(2).get(2), new Pixel(223.125, 0.0, 63.75));

  }

  // test sharpen x2 pixels
  @Test
  public void testMultiplierx2() {
    IImageManipulation sharpen = new Sharpen();
    ProgramImage programImage = new ProgramImage();
    List<List<Pixel>> checkerBoard = programImage.checkerboard(3, 3, 1);
    Image checkerBoardImg = new Image(checkerBoard);

    List<List<Pixel>> filteredImagex0 = sharpen.filter(checkerBoardImg, 0);

    assertEquals(filteredImagex0.get(0).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(0).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(0).get(2), new Pixel(255, 0, 0));

    assertEquals(filteredImagex0.get(1).get(0), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(1).get(1), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(1).get(2), new Pixel(0, 0, 255));

    assertEquals(filteredImagex0.get(2).get(0), new Pixel(255, 0, 0));
    assertEquals(filteredImagex0.get(2).get(1), new Pixel(0, 0, 255));
    assertEquals(filteredImagex0.get(2).get(2), new Pixel(255, 0, 0));

    List<List<Pixel>> filteredImagex1 = sharpen.filter(checkerBoardImg, 1);

    assertEquals(filteredImagex1.get(0).get(0), new Pixel(223.125, 0.0, 63.75));
    assertEquals(filteredImagex1.get(0).get(1), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(0).get(2), new Pixel(223.125, 0.0, 63.75));

    assertEquals(filteredImagex1.get(1).get(0), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(1).get(1), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex1.get(1).get(2), new Pixel(127.5, 0.0, 255.0));

    assertEquals(filteredImagex1.get(2).get(0), new Pixel(223.125, 0.0, 63.75));
    assertEquals(filteredImagex1.get(2).get(1), new Pixel(127.5, 0.0, 255.0));
    assertEquals(filteredImagex1.get(2).get(2), new Pixel(223.125, 0.0, 63.75));

    List<List<Pixel>> filteredImagex2 = sharpen.filter(checkerBoardImg, 2);

    assertEquals(filteredImagex2.get(0).get(0),
        new Pixel(235.078125, 0.0, 167.34375));
    assertEquals(filteredImagex2.get(0).get(1), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex2.get(0).get(2),
        new Pixel(235.078125, 0.0, 167.34375));

    assertEquals(filteredImagex2.get(1).get(0), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex2.get(1).get(1), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex2.get(1).get(2), new Pixel(255.0, 0.0, 255.0));

    assertEquals(filteredImagex2.get(2).get(0),
        new Pixel(235.078125, 0.0, 167.34375));
    assertEquals(filteredImagex2.get(2).get(1), new Pixel(255.0, 0.0, 255.0));
    assertEquals(filteredImagex2.get(2).get(2),
        new Pixel(235.078125, 0.0, 167.34375));

  }

  // NEEDED FOR RES PHOTOS

  /*
    // test sharpen Koala
    @Test
    public void testSharpenKoala() {
      Image img = new Image("src/model/Koala.ppm", "PPM");
      ImageManipulationInterface sharpen = new Sharpen();

      List<List<Pixel>> filteredImage = sharpen.filter(img, 4);
      //List<List<Pixel>> filteredx2Image = sharpen.filter("Sharpen*1koala.ppm");
     // List<List<Pixel>> filteredx3Image = sharpen.filter("Sharpen*2koala.ppm");
      //List<List<Pixel>> filteredx4Image = sharpen.filter("Sharpen*2koala.ppm");

      StringBuilder fileContent = new PPMImportExport().fileContentCreatorImg(filteredImage);


      new PPMImportExport().fileCreator(fileContent, "Sharpenx4Yekoala.ppm");
    }

    // test sharpen shoes image
    @Test
    public void testSharpenShoes() {
      Image img = new Image("res/Shoes.ppm", "PPM");
      ImageManipulationInterface sharpen = new Sharpen();

      List<List<Pixel>> filteredImage = sharpen.filter(img, 1);
      // List<List<Pixel>> filteredx2Image = blur.filter("Blurry*1koala.ppm");
      // List<List<Pixel>> filteredx3Image = blur.filter("Blurry*2koala.ppm");
      // List<List<Pixel>> filteredx4Image = blur.filter("Blurry*3koala.ppm");


      StringBuilder fileContent = new PPMImportExport().fileContentCreatorImg(filteredImage);

      new PPMImportExport().fileCreator(fileContent, "Sharpenx1Shoes.ppm");
    }
    */


}